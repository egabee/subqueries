# Subquery schema: coreum testnet network
# Version: 1.0.0

#############################
###### Chain Timeseries #####
#############################

type ChainHourlySnapshot @entity {
  " { Chain id }-{# of hours since Unix epoch time }"
  id: ID!

  " Total number of transactions in a hour "
  hourlyTransactionCount: Int!

  " Total number of failed transactions in a hour "
  hourlyFailedTransactionCount: Int!

  " Sum of gas used in transaction in a hour "
  hourlyGasConsumption: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

#############################
##### Contract Metadata #####
#############################

type Contract @entity {
  " Address of the contract "
  id: ID!

  " Name of the smart contract "
  name: String

  "Chain id i.e injective-1"
  chainId: String!

  transfers: [TransferEvent!] @derivedFrom(field: "contract")
}

###############################
##### Contract Timeseries #####
###############################

type ContractHourlySnapshot @entity {
  " { Contract Address }-{ # of hours since Unix epoch time } "
  id: ID!

  " Contract this snapshot is associated with "
  contract: Contract!

  " Total number of transactions in a hour "
  hourlyTransactionCount: Int!

  " Total number of failed transactions in a hour "
  hourlyFailedTransactionCount: Int!

  " Sum of gas used in transaction in a hour "
  hourlyGasConsumption: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
######## Event-Level Data ########
##################################

type TransferEvent @entity {
  " { Chain ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index "
  logIndex: Int!

  " The contract this event belongs to if it's a contract event "
  contract: Contract

  " Quantity of the tokens transferred "
  amount: BigInt!

  " Account that sent the tokens "
  from: Account!

  " Account that received the tokens "
  to: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

##################################
######## Account MetaData ########
##################################

" An account is a unique injective address "
type Account @entity {
  " Address of the account "
  id: ID!

  " Token transfers to this account "
  transferTo: [TransferEvent!]! @derivedFrom(field: "to")

  " Token transfers from this account "
  transferFrom: [TransferEvent!]! @derivedFrom(field: "from")

  " Token balances that this account holds "
  balances: [AccountBalance!]! @derivedFrom(field: "account")

  " Token balances snapshot that this account holds "
  balancesSnapshot: [AccountBalanceDailySnapshot!]! @derivedFrom(field: "account")
}

type AccountBalance @entity {
  " { Address Of the Account }-{ Address of the Token if any} "
  id: ID!

  " Account address "
  account: Account!

  " Contract address if any "
  contract: Contract

  " Current account balance "
  amount: BigInt!

  " Block number in which the balance was last modified "
  blockNumber: Int!

  "Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

###############################
###### Account Timeseries #####
###############################

type AccountBalanceDailySnapshot @entity {
  " { Address Of the Account }-{ Address of the Token if any }-{ # of days since Unix epoch time } "
  id: ID!

  " Account address "
  account: Account!

  " Contract address "
  token: Contract

  " Current account balance "
  amount: BigInt!

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

## To be deleted

# type Block @entity {
#   id: ID! # The block hash
#   height: BigInt!
# }

# type Transaction @entity {
#   "{blockHeight}-{index in block}"
#   id: ID!

#   "Block height that we inserted in database"
#   blockHeight: Int!

#   "Block timestamp"
#   timestamp: BigInt!

#   "success or failed"
#   status: String!

#   "Chain id i.e injective-1"
#   chainId: String!

#   "Amount of gas being used at tx execution"
#   gasUsed: BigInt!
# }

# type Message @entity {
#   id: ID!
#   blockHeight: Int!
#   txHash: String!
#   from: String!
#   to: String!
#   amount: String!
#   chainId: String!
# }

# type Token @entity {
#   "{subunit}-{issuer}"
#   id: ID!
#   issuer: String!
#   symbol: String!
#   subunit: String!
#   precision: Int!
#   initialAmount: String!
#   description: String!
#   features: String!
#   burnRate: String!
#   sendCommissionRate: String!
#   chainId: String!
#   timestamp: BigInt!
# }

# type TokenTransfer @entity {
#   id: ID!
#   blockHeight: Int!
#   timestamp: BigInt!
#   txHash: String!
#   from: String!
#   to: String!
#   amount: String!
#   chainId: String!
#   token: Token!
#   gasUsed: BigInt!
#   status: String!
# }
